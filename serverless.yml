app: gitscope-backend
service: gitscope-backend

custom:
  environment:
    ORIGIN:
      prod: https://gitscope.vercel.app
      dev: http://localhost:4000
  serverless-offline:
    port: 4000
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true      

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1 # ap-northeast-1
  environment:
    NODE_ENV: ${opt:stage}
    GITHUB_CLIENT_ID: ${ssm:/gitscope/${opt:stage}/githubClientId}
    GITHUB_CLIENT_SECRET: ${ssm:/gitscope/${opt:stage}/githubClientSecret}
    ORIGIN: ${self:custom.environment.ORIGIN.${opt:stage}}

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

resources: # CloudFormation template syntax
  Resources:
    userRepositorySetting:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}_UserRepositorySetting
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
          - AttributeName: repositoryNameWithOwner
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH
          - AttributeName: repositoryNameWithOwner
            KeyType: SORT
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


functions:
  main:
    handler: src/handler/authHandler.main
    events:
      - http:
          path: /auth/github/callback
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  repos:
    handler: src/handler/reposHandler.main
    events:
      - http:
          path: /repos
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  setUpRepository:
    handler: src/handler/setUpRepositoryHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/setup
          method: post
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent            
  mergedPullRequestsPerDay:
    handler: src/handler/mergedPullRequestsPerDay.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/prsPerDay
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true
  pullRequestsHandler:
    handler: src/handler/pullRequestsHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/prs
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true

  activityRatioHandler:
    handler: src/handler/activityRatioHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/activityRatio
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true
