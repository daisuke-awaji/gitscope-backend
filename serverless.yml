app: gitscope-backend
service: gitscope-backend

custom:
  useDotenv: true
  environment:
    ORIGIN:
      prod: https://gitscope.vercel.app
      dev: http://localhost:4000
  serverless-offline:
    port: 4000
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1 # ap-northeast-1
  timeout: 29
  environment:
    NODE_ENV: ${opt:stage}
    GITHUB_CLIENT_ID: ${ssm:/gitscope/${opt:stage}/githubClientId}
    GITHUB_CLIENT_SECRET: ${ssm:/gitscope/${opt:stage}/githubClientSecret}
    ORIGIN: ${self:custom.environment.ORIGIN.${opt:stage}}
    GITHUB_APPS_PRIVATE_KEY: ${ssm:/gitscope/${opt:stage}/privateKey}
  iamRoleStatements:
    - Effect: Allow
      Action:
        # default
        - logs:CreateLogStream # default
        - logs:PutLogEvents # default
        - logs:CreateLogGroup
        # CloudWatchReacOnlyAccess
        - 'autoscaling:Describe*'
        - 'cloudwatch:Describe*'
        - 'cloudwatch:Get*'
        - 'cloudwatch:List*'
        - 'logs:Get*'
        - 'logs:List*'
        - 'logs:Describe*'
        - 'logs:TestMetricFilter'
        - 'logs:FilterLogEvents'
        - 'dynamodb:*'
      Resource:
        - '*'

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

resources: # CloudFormation template syntax
  Resources:
    userRepositorySetting:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}_UserRepositorySetting
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
          - AttributeName: repositoryNameWithOwner
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH
          - AttributeName: repositoryNameWithOwner
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # CommitAnalysis:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${opt:stage}_CommitAnalysis
    #     AttributeDefinitions:
    #       - AttributeName: sha
    #         AttributeType: S
    #       - AttributeName: repositoryNameWithOwner
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: sha
    #         KeyType: HASH
    #       - AttributeName: repositoryNameWithOwner
    #         KeyType: RANGE
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     GlobalSecondaryIndexes:
    #       - IndexName: repositoryNameWithOwnerIndex
    #         KeySchema:
    #           - AttributeName: repositoryNameWithOwner
    #             KeyType: HASH
    #         Projection:
    #           ProjectionType: ALL
    #         ProvisionedThroughput:
    #           ReadCapacityUnits: 1
    #           WriteCapacityUnits: 1
    CommitAnalysis:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}_CommitAnalysis
        AttributeDefinitions:
          - AttributeName: repositoryNameWithOwner
            AttributeType: S
          - AttributeName: sha
            AttributeType: S
        KeySchema:
          - AttributeName: repositoryNameWithOwner
            KeyType: HASH
          - AttributeName: sha
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  main:
    handler: src/handler/authHandler.main
    events:
      - http:
          path: /auth/github/callback
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  resignWithRefreshToken:
    handler: src/handler/resignWithRefreshToken.handler
    events:
      - http:
          path: /auth/github/resignWithRefreshToken
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent    

  repos:
    handler: src/handler/reposHandler.main
    events:
      - http:
          path: /repos
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  setUpRepository:
    handler: src/handler/setUpRepositoryHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/setup
          method: post
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  mergedPullRequestsPerDay:
    handler: src/handler/mergedPullRequestsPerDay.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/prsPerDay
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true
  pullRequestsHandler:
    handler: src/handler/pullRequestsHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/prs
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true

  activityRatioHandler:
    handler: src/handler/activityRatioHandler.main
    events:
      - http:
          path: /repos/{repositoryOwner}/{repositoryName}/activityRatio
          method: get
          cors:
            origin: ${self:custom.environment.ORIGIN.${opt:stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            parameters:
              querystrings:
                startDateString: false
                endDateString: false
              paths:
                repositoryOwner: true
                repositoryName: true

  gitHubWebhookSubscribeHandler:
    handler: src/handler/gitHubWebhookSubscribeHandler.main
    events:
      - http:
          path: /github/webhook
          method: post
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8 # https://github.com/lambci/git-lambda-layer